"""
Receipt API Routes
Endpoints per gestione scontrini con flusso completo:
UPLOAD ‚Üí OCR ‚Üí PARSING ‚Üí Normalizzazione ‚Üí Validazione ‚Üí Score ‚Üí Review Utente ‚Üí Categorizzazione modificati ‚Üí Salvataggio
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict

router = APIRouter()

from app.services.ocr_service import ocr_service
from app.services.ai_parser_service import ai_receipt_parser
from app.services.supabase_service import supabase_service
from app.services.store_service import store_service
from app.services.categorization_service import categorization_service
from app.agents.product_normalizer import product_normalizer_agent
from app.utils.product_aggregator import aggregate_duplicate_products
from concurrent.futures import ThreadPoolExecutor
import requests

# ============================================
# SCHEMAS
# ============================================

class ProcessReceiptRequest(BaseModel):
    household_id: str
    uploaded_by: str
    image_url: str


class NormalizedProductData(BaseModel):
    normalized_product_id: str
    canonical_name: str
    brand: Optional[str] = None
    category: Optional[str] = None
    subcategory: Optional[str] = None
    size: Optional[str] = None
    unit_type: Optional[str] = None
    confidence: float
    requires_manual_review: bool


class ReceiptItemData(BaseModel):
    receipt_item_id: str
    raw_product_name: str
    quantity: float
    unit_price: Optional[float]
    total_price: float
    # Dati normalizzati come campi diretti
    canonical_name: Optional[str] = None
    brand: Optional[str] = None
    category: Optional[str] = None
    subcategory: Optional[str] = None
    size: Optional[str] = None
    unit_type: Optional[str] = None
    confidence: Optional[float] = None
    pending_review: Optional[bool] = None
    user_verified: Optional[bool] = None


class ProcessReceiptResponse(BaseModel):
    success: bool
    receipt_id: str
    message: str
    store_name: Optional[str]
    receipt_date: Optional[str]
    total_amount: Optional[float]
    items: List[ReceiptItemData]


class ModifiedProduct(BaseModel):
    """Prodotto modificato dall'utente"""
    receipt_item_id: str
    canonical_name: str
    brand: Optional[str] = None
    size: Optional[str] = None
    unit_type: Optional[str] = None
    quantity: float
    total_price: float


class ConfirmReceiptRequest(BaseModel):
    """Conferma finale dopo review utente"""
    receipt_id: str
    modified_products: List[ModifiedProduct]  # Solo prodotti modificati


class ConfirmReceiptResponse(BaseModel):
    success: bool
    message: str
    receipt_id: str


# ============================================
# ENDPOINTS
# ============================================

@router.post("/process", response_model=ProcessReceiptResponse)
async def process_receipt(request: ProcessReceiptRequest):
    """
    Step 1-6: UPLOAD ‚Üí OCR ‚Üí PARSING ‚Üí Normalizzazione ‚Üí Validazione ‚Üí Score
    
    Ritorna dati per review utente (con categoria/sottocategoria NASCOSTE nel frontend)
    """
    try:
        # Verifica household
        household = supabase_service.get_household(request.household_id)
        if not household:
            raise HTTPException(status_code=404, detail="Household not found")
        
        # Step 1-2: OCR
        print("üì∏ Step 1-2: OCR...")
        img_response = requests.get(request.image_url)
        img_content = img_response.content
        
        ocr_result = ocr_service.extract_text_from_image(image_content=img_content)
        if not ocr_result["success"]:
            raise Exception(f"OCR failed: {ocr_result.get('error')}")
        
        # Step 3: PARSING
        print("üìù Step 3: Parsing...")
        parsing_result = ai_receipt_parser.parse_receipt(ocr_result["text"])
        if not parsing_result["success"]:
            raise Exception(f"Parsing failed: {parsing_result.get('error')}")
        
        # Find or Create Store
        store_id = None
        if parsing_result.get("store_name"):
            store_data = {
                "store_name": parsing_result["store_name"],
                "address": parsing_result.get("address_full"),
                "city": parsing_result.get("address_city"),
                "vat_number": parsing_result.get("vat_number")
            }
            store_result = store_service.find_or_create_store(store_data)
            if store_result["success"]:
                store_id = store_result["store"]["id"]
        
        # Crea receipt (status=processing)
        receipt = supabase_service.create_receipt(
            household_id=request.household_id,
            uploaded_by=request.uploaded_by,
            image_url=request.image_url,
            store_id=store_id,
            store_name=parsing_result.get("store_name"),
            store_address=parsing_result.get("address_full"),
            receipt_date=parsing_result.get("receipt_date"),
            receipt_time=parsing_result.get("receipt_time"),
            total_amount=parsing_result.get("total_amount"),
            payment_method=parsing_result.get("payment_method"),
            discount_amount=parsing_result.get("discount_amount"),
            raw_ocr_text=ocr_result["text"],
            ocr_confidence=ocr_result.get("confidence"),
            processing_status="processing"
        )
        receipt_id = receipt["id"]
        
        # Step 4-5-6: Normalizzazione + Validazione + Score (parallelo)
        print("ü§ñ Step 4-5-6: Normalizzazione + Validazione + Score...")
        
        parsed_items = parsing_result.get("items", [])
        
        # Aggrega prodotti duplicati
        aggregated_items = aggregate_duplicate_products(parsed_items)
        
        def normalize_item(item):
            """Normalizza singolo prodotto (include validazione e score)"""
            # Normalizzazione (gi√† include validazione interna)
            norm_result = product_normalizer_agent.normalize_product(
                raw_product_name=item["raw_product_name"],
                store_name=parsing_result.get("store_name"),
                price=item["total_price"]
            )
            
            if not norm_result["success"]:
                print(f"‚ö†Ô∏è Normalization failed for '{item['raw_product_name']}': {norm_result.get('error')}")
                return None
            
            return {
                "raw_product_name": item["raw_product_name"],
                "quantity": item.get("quantity", 1.0),
                "unit_price": item.get("unit_price"),
                "total_price": item["total_price"],
                # Campi normalizzati direttamente
                "canonical_name": norm_result.get("canonical_name"),
                "brand": norm_result.get("brand"),
                "category": norm_result.get("category"),
                "subcategory": norm_result.get("subcategory"),
                "size": norm_result.get("size"),
                "unit_type": norm_result.get("unit_type"),
                "confidence": norm_result.get("confidence", 0.5),
                "pending_review": norm_result.get("requires_manual_review", False),
                "user_verified": False
            }
        
        # Normalizza tutti i prodotti in parallelo
        with ThreadPoolExecutor(max_workers=5) as executor:
            normalized_items = list(executor.map(normalize_item, aggregated_items))
        
        # Filtra None (prodotti falliti)
        normalized_items = [item for item in normalized_items if item is not None]
        
        # Crea receipt_items in batch
        if normalized_items:
            items_to_insert = []
            for idx, item in enumerate(normalized_items):
                items_to_insert.append({
                    "receipt_id": receipt_id,
                    "raw_product_name": item["raw_product_name"],
                    "quantity": item["quantity"],
                    "unit_price": item["unit_price"],
                    "total_price": item["total_price"],
                    "line_number": idx + 1
                })
            
            receipt_items_data = supabase_service.create_receipt_items(
                receipt_id=receipt_id,
                items=items_to_insert
            )
            
            # Aggiungi receipt_item_id ai risultati
            for idx, item in enumerate(normalized_items):
                if idx < len(receipt_items_data):
                    item["receipt_item_id"] = receipt_items_data[idx]["id"]
        
        # Aggiorna receipt status
        supabase_service.client.table("receipts")\
            .update({"processing_status": "pending"})\
            .eq("id", receipt_id)\
            .execute()
        
        print(f"‚úÖ Processing completato: {len(normalized_items)} prodotti normalizzati")
        
        # Crea ReceiptItemData con campi normalizzati
        receipt_items = []
        for item in normalized_items:
            receipt_items.append(ReceiptItemData(
                receipt_item_id=item.get("receipt_item_id", ""),
                raw_product_name=item["raw_product_name"],
                quantity=item["quantity"],
                unit_price=item["unit_price"],
                total_price=item["total_price"],
                # Campi normalizzati (ora sono direttamente in item)
                canonical_name=item.get("canonical_name"),
                brand=item.get("brand"),
                category=item.get("category"),
                subcategory=item.get("subcategory"),
                size=item.get("size"),
                unit_type=item.get("unit_type"),
                confidence=item.get("confidence"),
                pending_review=item.get("pending_review"),
                user_verified=item.get("user_verified")
            ))
        
        return ProcessReceiptResponse(
            success=True,
            receipt_id=receipt_id,
            message="Scontrino processato. Verifica i dati prima di confermare.",
            store_name=parsing_result.get("store_name"),
            receipt_date=parsing_result.get("receipt_date").isoformat() if parsing_result.get("receipt_date") else None,
            total_amount=parsing_result.get("total_amount"),
            items=receipt_items
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in process_receipt: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")


@router.post("/confirm", response_model=ConfirmReceiptResponse)
async def confirm_receipt(request: ConfirmReceiptRequest):
    """
    Step 7-8: Review finale utente ‚Üí Categorizzazione prodotti modificati ‚Üí Salvataggio
    
    Flow:
    1. Riceve lista prodotti MODIFICATI dall'utente
    2. Per ogni prodotto modificato: ri-categorizza con LLM
    3. Aggiorna normalized_products con nuove categorie
    4. Crea purchase_history per TUTTI i prodotti
    5. Aggiorna receipt status=completed
    """
    try:
        # Verifica receipt
        receipt = supabase_service.get_receipt(request.receipt_id)
        if not receipt:
            raise HTTPException(status_code=404, detail="Receipt not found")
        
        print(f"üìã Step 7-8: Conferma receipt {request.receipt_id}")
        print(f"   Prodotti modificati: {len(request.modified_products)}")
        
        # Step 7: Categorizzazione prodotti modificati
        for modified in request.modified_products:
            print(f"üîÑ Re-categorizing modified product: {modified.canonical_name}")
            
            # Chiamata LLM per categorizzazione
            cat_result = categorization_service.categorize_product(
                canonical_name=modified.canonical_name,
                brand=modified.brand,
                size=modified.size,
                unit_type=modified.unit_type
            )
            
            if not cat_result["success"]:
                print(f"‚ö†Ô∏è Categorization failed for {modified.canonical_name}")
                continue
            
            # Ottieni raw_product_name dal receipt_item
            item_data = supabase_service.client.table("receipt_items")\
                .select("raw_product_name")\
                .eq("id", modified.receipt_item_id)\
                .single()\
                .execute()
            
            if not item_data.data:
                continue
            
            raw_product_name = item_data.data["raw_product_name"]
            
            # Cerca il mapping per questo raw_name
            mapping_data = supabase_service.client.table("product_mappings")\
                .select("normalized_product_id")\
                .eq("raw_name", raw_product_name)\
                .limit(1)\
                .execute()
            
            if not mapping_data.data:
                print(f"‚ö†Ô∏è No mapping found for raw_name: {raw_product_name}")
                continue
            
            normalized_product_id = mapping_data.data[0]["normalized_product_id"]
            
            # Aggiorna normalized_product con nuovi dati + categoria
            supabase_service.client.table("normalized_products")\
                .update({
                    "canonical_name": modified.canonical_name,
                    "brand": modified.brand,
                    "size": modified.size,
                    "unit_type": modified.unit_type,
                    "category": cat_result["category"],
                    "subcategory": cat_result.get("subcategory")
                })\
                .eq("id", normalized_product_id)\
                .execute()
            
            print(f"‚úÖ Updated: {modified.canonical_name} ‚Üí {cat_result['category']}/{cat_result.get('subcategory')}")
        
        # Step 8: Crea purchase_history per TUTTI i prodotti
        print("üíæ Step 8: Creating purchase history...")
        
        all_items = supabase_service.get_receipt_items(request.receipt_id)
        
        for item in all_items:
            # Ottieni normalized_product_id
            mapping_data = supabase_service.client.table("product_mappings")\
                .select("normalized_product_id")\
                .eq("raw_name", item["raw_product_name"])\
                .limit(1)\
                .execute()
            
            if not mapping_data.data:
                continue
            
            normalized_product_id = mapping_data.data[0]["normalized_product_id"]
            
            # Crea purchase_history
            supabase_service.create_purchase_history(
                household_id=receipt["household_id"],
                receipt_id=request.receipt_id,
                receipt_item_id=modified.receipt_item_id,
                normalized_product_id=normalized_product_id,
                quantity=item["quantity"],
                unit_price=item.get("unit_price"),
                total_price=item["total_price"],
                purchase_date=receipt.get("receipt_date")
            )
        
        # Aggiorna receipt status=completed
        supabase_service.client.table("receipts")\
            .update({"processing_status": "completed"})\
            .eq("id", request.receipt_id)\
            .execute()
        
        print(f"‚úÖ Receipt {request.receipt_id} completato!")
        
        return ConfirmReceiptResponse(
            success=True,
            message="Scontrino salvato con successo!",
            receipt_id=request.receipt_id
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in confirm_receipt: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")


@router.get("/{receipt_id}")
async def get_receipt(receipt_id: str):
    """Ottieni dettagli scontrino"""
    receipt = supabase_service.get_receipt(receipt_id)
    if not receipt:
        raise HTTPException(status_code=404, detail="Receipt not found")
    
    items = supabase_service.get_receipt_items(receipt_id)
    receipt["items"] = items
    
    return receipt


@router.get("/household/{household_id}")
async def get_household_receipts(household_id: str, limit: int = 50):
    """Ottieni tutti gli scontrini di un household"""
    receipts = supabase_service.get_receipts_by_household(
        household_id=household_id,
        limit=limit
    )
    
    for receipt in receipts:
        items = supabase_service.get_receipt_items(receipt["id"])
        receipt["items"] = items
    
    return {"receipts": receipts, "total": len(receipts)}


@router.delete("/{receipt_id}")
async def delete_receipt(receipt_id: str):
    """Elimina scontrino"""
    receipt = supabase_service.get_receipt(receipt_id)
    if not receipt:
        raise HTTPException(status_code=404, detail="Receipt not found")
    
    supabase_service.client.table("receipts")\
        .delete()\
        .eq("id", receipt_id)\
        .execute()
    
    return {"message": "Receipt deleted successfully"}